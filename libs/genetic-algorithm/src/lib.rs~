use rand::{RngCore, seq::SliceRandom};

struct Chromosome{genes: Vec<f32>}
impl Chromosome {
    pub fn len(&self) -> usize {
        self.genes.len()
    }

    pub fn iter(&self) -> impl Iterator<Item = &f32> {
        self.genes.iter()
    }

    pub fn iter_mut(&mut self) -> impl Iterator<Item = &mut f32> {
        self.genes.iter_mut()
    }
}

pub trait Individual {
    fn fitness(&self) -> f32;
    fn chromosome(&self) -> &Chromosome;
}

pub struct GeneticAlgorithm<S> {
    selection_method: S
}

impl<S> GeneticAlgorithm<S>
where S: SelectionAlgorithm {
    pub fn evolve<Agent: Individual>(&self, rng: &mut dyn RngCore, population: &[Agent]) -> Vec<Agent> {
        population.iter().map(|_| {
            let parent_a = self.selection_method.select(rng, population);
            let parent_b = self.selection_method.select(rng, population);
            todo!()
        }).collect::<Vec<_>>()
    }
}

pub trait SelectionAlgorithm {
    fn select<'a, Agent: Individual>(&self, rng: &mut dyn RngCore, individuals: &'a [Agent]) -> &'a Agent;
}

pub struct RouletteWheelSelection {}
impl SelectionAlgorithm for RouletteWheelSelection {
    fn select<'a, Agent: Individual>(&self, rng: &mut dyn RngCore, individuals: &'a [Agent]) -> &'a Agent {
       let random_agent =  individuals.choose_weighted(rng, |individual| individual.fitness());
        random_agent.unwrap()
    }
}


#[cfg(test)]
mod tests {
    use std::collections::BTreeMap;

    use rand::SeedableRng;
    use rand_chacha::ChaCha8Rng;

    use super::*;

    struct TestAgent {
        fitness: f32
    }

    impl TestAgent {
        fn new(fitness: f32) -> TestAgent {
            TestAgent { fitness }
        }
    }

    impl Individual for TestAgent {
        fn fitness(&self) -> f32 {
            self.fitness
        }

        fn chromosome(&self) -> &Chromosome {
            unimplemented!("tests")
        }
    }


    #[test]
    fn roulette_wheel_selection() {
        let population: Vec<TestAgent> =
            (0..10).map(|i| i as f32).map(TestAgent::new).collect::<Vec<_>>();
        let mut rng = ChaCha8Rng::from_seed(Default::default());
        let mut histogram = BTreeMap::new();
        for _ in 0..100_000 {
            let selected = RouletteWheelSelection{}.select(&mut rng, &population).fitness as i32;
            *histogram.entry(selected).or_insert(0) += 1;
        }
        let expected_histogram = BTreeMap::from_iter([
            (1, 2238),
            (2, 4448),
            (3, 6671),
            (4, 8839),
            (5, 11013),
            (6, 13386),
            (7, 15424),
            (8, 17645),
            (9, 20336),
        ]);
        assert_eq!(histogram, expected_histogram)
    }
}
